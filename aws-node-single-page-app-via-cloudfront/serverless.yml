service: single-page-app-via-cloudfront7

frameworkVersion: ">=1.2.0 <2.0.0"

plugins:
- serverless-single-page-app-plugin


provider:
  region: us-east-1
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'dev'}

custom:
  envvars: ${file(${self:provider.stage}-env.yml)}
  s3Bucket: ${self:custom.envvars.bucket}
  appDirectory: app
  public_domain: ${self:custom.envvars.public_domain}
  acm_certificate_arn: ${self:custom.envvars.acm_certificate_arn}

resources:
  Resources:
    WebAppCloudFrontOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties: 
        CloudFrontOriginAccessIdentityConfig: 
          Comment: WebApp CloudFrontOrgin Indentity
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Join
                - ""
                - - !GetAtt WebAppS3Bucket.Arn
                  - "/*"
              Principal:
                CanonicalUser: !GetAtt WebAppCloudFrontOAI.S3CanonicalUserId
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              S3OriginConfig:
                #origin-access-identity/cloudfront/!Ref WebAppCloudFrontOAI
                OriginAccessIdentity: !Join
                - /
                - - origin-access-identity
                  - cloudfront
                  - !Ref WebAppCloudFrontOAI 
          Enabled: 'true'
          Aliases:
            - ${self:custom.public_domain}
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            SslSupportMethod: sni-only
            AcmCertificateArn: ${self:custom.acm_certificate_arn} 
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]
